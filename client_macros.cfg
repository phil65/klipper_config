# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#   TURN_OFF_HEATERS
#   G91                            ; relative positioning
#   G0 Z5.00 F20000      ; move nozzle to remove stringing
#   CLEAR_PAUSE
#   SDCARD_RESET_FILE
#   BASE_CANCEL_PRINT

[gcode_macro SAFE_MOVE_UP]
gcode:
  {% set distance = params.DISTANCE|default(20)|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - distance) %}
      {% set z_safe = distance %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G91
  G1 Z{z_safe} F900
  G90

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  SAFE_MOVE_UP
  G0 X{x_park} Y{y_park} F6000
  M220 S100
  M221 S100
  BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}

# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### end of definitions #####
#   G91
#   G1 E{E} F2100
#   RESTORE_GCODE_STATE NAME=PAUSE_state
#   BASE_RESUME

[gcode_macro PRINT_START]
gcode:
    {% set T_BED = params.T_BED|default(100)|float %}
    {% set T_EXTRUDER = params.T_EXTRUDER|default(220)|float %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set initial_extruder = params.INITIAL_EXTRUDER|default(0)|int %}
    {% set print_min = params.PRINT_MIN|default("0,0")|string %}
    {% set print_max = params.PRINT_MAX|default("350,350")|string %}
    M140 S{T_BED}               ; Start bed heating
    BED_MESH_CLEAR                 ; clear mesh
    _CG28                          ; Home the printer
    G90                            ; Use absolute coordinates
    PARKCENTER                     ; Move to center
    M118 Parameters:
    M118 Bed Temp: {T_BED}
    M118 Extruder Temp: {T_EXTRUDER}
    M118 Z adjust: {z_adjust}
    M118 Initial Extruder: {initial_extruder}
    M118 Size: {used_size}
    M117 Heating..
   # _HEATER_ON
   # M106 S255                      ; set print fan to full speed
    M190 S{T_BED}               ; Wait for bed to reach temperature
    M109 S{T_EXTRUDER}          ; Set and wait for nozzle to reach temperature
    # M107                           ; turn print fan off
    SET_PIN PIN=caselight VALUE=1.00
    QUAD_GANTRY_LEVEL CALIBRATE=false ; QGL
    M109 S{T_EXTRUDER}          ; Set and wait for nozzle to reach temperature
    ERCF_CHANGE_TOOL_STANDALONE TOOL={initial_extruder}
    WIPE_NOZZLE                   ; clean nozzle
    CALIBRATE_Z
    BED_MESH_CALIBRATE PRINT_MIN={print_min} PRINT_MAX={print_max}
    # ADAPTIVE_BED_MESH SIZE={used_size}
    BUCKET_PRIME
    SET_GCODE_OFFSET Z_ADJUST={z_adjust} MOVE=1

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X175 Y175 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M117 Print Ended!
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament 5mm
    G91                            ; relative positioning
    G0 Z1.00 X5.0 Y5.0 F20000      ; move nozzle to remove stringing
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X50 Y320 F3600             ; park nozzle at rear
    # CLEAN_NOZZLE                    ; Wipe nozzle before park and cooldown
    M220 S100
    M221 S100
    TURN_OFF_HEATERS
    ERCF_EJECT
    BED_MESH_CLEAR

[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1
    
[gcode_macro SAVE_IF_SET]
gcode:
    {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
    {printer.gcode.action_respond_info("Saving was requested - saving and restarting now")}
    SAVE_CONFIG
    {% endif %}
    
    
[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro HEAT_SOAK]
gcode:
    PAUSE
    M106 S255                                        ; run cooling fans at full power
    UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION=300   ; resume after 10 minutes

[delayed_gcode SOAK_TIME]
gcode:
    RESUME
    M107

[gcode_macro SET_PRINT_PROGRESS]
gcode:
  {% set num_leds = params.P|default(0)|float %}
  {% if num_leds < 25 %}
      SET_LED LED=Beleuchtung RED=0 GREEN=0 BLUE=0 TRANSMIT=0
      SET_LED LED=Beleuchtung RED=1 GREEN=0 BLUE=0 INDEX={num_leds|int + 1} TRANSMIT=0
      SET_LED LED=Beleuchtung RED=1 GREEN=0 BLUE=0 INDEX={num_leds|int + 26} TRANSMIT=1
  {% else %}
      SET_LED LED=Beleuchtung RED=0 GREEN=1 BLUE=0 TRANSMIT=1
  {% endif %}

[gcode_macro SET_PRINT_PROGRESS_2]
gcode:
  {% set num_leds = params.P|default(0)|int %}
  {% if num_leds < 25 %}
    SET_LED LED=Beleuchtung RED=0 GREEN=0 BLUE=0 TRANSMIT=0 SYNC=0
    {% for idx in range(num_leds) %}
        {% set red = 1 - idx|float * 0.04 %}
        {% set green = idx|float * 0.04 %}
        SET_LED LED=Beleuchtung RED={red} GREEN={green} BLUE=0 INDEX={idx|int + 1} TRANSMIT=0 SYNC=0
        SET_LED LED=Beleuchtung RED={red} GREEN={green} BLUE=0 INDEX={50 - idx|int} TRANSMIT=0 SYNC=0
    {% endfor %}
    SET_LED LED=Beleuchtung RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0
    SET_LED LED=Beleuchtung RED=1 GREEN=0 BLUE=0 INDEX=50 TRANSMIT=1 SYNC=0
  {% else %}
      SET_LED LED=Beleuchtung RED=0 GREEN=1 BLUE=0 TRANSMIT=1 SYNC=0
  {% endif %}
  